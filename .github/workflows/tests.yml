name: Laravel Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-postgres:
    name: Test with PostgreSQL
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
          POSTGRES_DB: laravel
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, pdo, pgsql
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Copy environment
        run: cp .env.example .env

      - name: Set PostgreSQL DB config
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=laravel" >> .env
          echo "DB_USERNAME=sail" >> .env
          echo "DB_PASSWORD=password" >> .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Generate app key
        run: php artisan key:generate

      - name: Run PHPUnit (PostgreSQL)
        run: php artisan test

  test-sqlite:
    name: Test with SQLite (in-memory)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, pdo, sqlite, pdo_sqlite
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Copy environment
        run: cp .env.example .env

      - name: Set SQLite config
        run: |
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env

      - name: Generate app key
        run: php artisan key:generate

      - name: Run PHPUnit (SQLite)
        run: php artisan test --testsuite=Feature

  coverage-sqlite:
    name: Generate Code Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP with coverage
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, pdo, sqlite, pdo_sqlite
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Copy environment
        run: cp .env.example .env

      - name: Set SQLite config
        run: |
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env

      - name: Generate app key
        run: php artisan key:generate

      - name: Run PHPUnit with coverage
        run: |
          mkdir -p coverage
          ./vendor/bin/phpunit --coverage-cobertura=coverage/coverage.xml

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '40 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
